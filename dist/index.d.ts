// Generated by dts-bundle-generator v9.1.0

import { LogLevelDesc, LoggingMethod } from 'loglevel';

export type TCodeValue = string | number;
export type TStatusCodes = Record<TCodeValue, TCodeValue>;
export type DateTypes = number | string | Date | undefined;
export interface TItem {
	gid: string;
	name: string;
	gr: string;
	qpu: number;
	from: string;
	frAct: number;
	fqL: number;
	fqA: number;
	fqM: number;
	valid: number;
}
export interface WorkDateOption {
	delta?: number;
}
export type WorkDateFunction = (offset?: number, baseDay?: DateTypes) => string | undefined;
export type ResponseMessage = object | string;
export interface IConsoleLogger {
	trace: LoggingMethod;
	debug: LoggingMethod;
	info: LoggingMethod;
	warn: LoggingMethod;
	error: LoggingMethod;
}
export type TArgs = any[];
declare function logger(ticker?: string): {
	debug: (...args: TArgs) => void;
	info: (...args: TArgs) => void;
	warn: (...args: TArgs) => void;
	error: (...args: TArgs) => void;
};
export declare class Logger implements IConsoleLogger {
	static setLevel(isProduction: boolean): void;
	static setLogLevel(level: LogLevelDesc): void;
	private _ticker;
	constructor(ticker?: string);
	private logPrefix;
	private debugPrefix;
	debug: (...args: unknown[]) => void;
	info: (...args: unknown[]) => void;
	warn: (...args: unknown[]) => void;
	error: (...args: unknown[]) => void;
	trace: (...args: unknown[]) => void;
}
export declare const http: {
	send200Ok(res: import("express").Response<any, Record<string, any>>, msg?: ResponseMessage): import("express").Response<any, Record<string, any>>;
	send201Created(res: import("express").Response<any, Record<string, any>>, msg?: ResponseMessage): import("express").Response<any, Record<string, any>>;
	send204NoContent(res: import("express").Response<any, Record<string, any>>, msg?: ResponseMessage): import("express").Response<any, Record<string, any>>;
	send400BadRequest(res: import("express").Response<any, Record<string, any>>, msg?: ResponseMessage): import("express").Response<any, Record<string, any>>;
	send401UnAuthorized(res: import("express").Response<any, Record<string, any>>, msg?: ResponseMessage): import("express").Response<any, Record<string, any>>;
	send404NotFound(res: import("express").Response<any, Record<string, any>>, msg?: ResponseMessage): import("express").Response<any, Record<string, any>>;
	send405MethodNotAllowed(res: import("express").Response<any, Record<string, any>>, msg?: ResponseMessage): import("express").Response<any, Record<string, any>>;
	send409Conflict(res: import("express").Response<any, Record<string, any>>, msg?: ResponseMessage): import("express").Response<any, Record<string, any>>;
	send500ServerError(res: import("express").Response<any, Record<string, any>>, msg?: ResponseMessage): import("express").Response<any, Record<string, any>>;
	send503ServiceUnavailable(res: import("express").Response<any, Record<string, any>>, msg?: ResponseMessage): import("express").Response<any, Record<string, any>>;
	sendJSONResponse(res: import("express").Response<any, Record<string, any>>, status: number, content?: ResponseMessage): import("express").Response<any, Record<string, any>>;
	callbackError400: (req: import("express").Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>, res: import("express").Response<any, Record<string, any>>) => import("express").Response<any, Record<string, any>>;
	callbackError405: (req: import("express").Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>, res: import("express").Response<any, Record<string, any>>) => import("express").Response<any, Record<string, any>>;
	StatusCodes: TStatusCodes;
};
export function rsisFactory(options?: WorkDateOption): {
	workDate: (offset?: number, baseDay?: DateTypes) => string;
	week: (atDate?: DateTypes) => any;
	toISODay: (offset?: number, baseDay?: DateTypes) => string;
	today: () => string;
	needUnitsForPeriod: (item: TItem, period: number) => number[];
};
declare function julianDay(gregorianDate: DateTypes): number;
declare function week21c(gregorianDate: DateTypes): number;
export declare const weeks: {
	JDN_of_20010101: number;
	julianDay: typeof julianDay;
	week21c: typeof week21c;
};
export declare const version: string;

export {
	LogLevelDesc,
	LoggingMethod,
	logger as consoleLogger,
};

export {};
