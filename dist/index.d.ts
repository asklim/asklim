// Generated by dts-bundle-generator v8.0.1

import { LoggingMethod } from 'loglevel';

export type DateTypes = number | string | Date | undefined;
export interface TItem {
	gid: string;
	name: string;
	gr: string;
	qpu: number;
	from: string;
	frAct: number;
	fqL: number;
	fqA: number;
	fqM: number;
	valid: number;
}
export interface WorkDateOption {
	delta?: number;
}
export type WorkDateFunction = (offset?: number, baseDay?: DateTypes) => string | undefined;
export type ResponseMessage = object | string;
export interface IConsoleLogger {
	trace: LoggingMethod;
	debug: LoggingMethod;
	info: LoggingMethod;
	warn: LoggingMethod;
	error: LoggingMethod;
}
export type TArgs = any[];
declare function logger(ticker?: string): {
	debug: (...args: TArgs) => void;
	info: (...args: TArgs) => void;
	warn: (...args: TArgs) => void;
	error: (...args: TArgs) => void;
};
export declare class Logger implements IConsoleLogger {
	static setLevel(isProduction: boolean): void;
	private _ticker;
	constructor(ticker?: string);
	private logPrefix;
	private debugPrefix;
	debug: (...args: unknown[]) => void;
	info: (...args: unknown[]) => void;
	warn: (...args: unknown[]) => void;
	error: (...args: unknown[]) => void;
	trace: (...args: unknown[]) => void;
}
declare enum HttpResponseCodes {
	CONTINUE = 100,
	SWITCHING_PROTOCOLS = 101,
	PROCESSING = 102,
	OK = 200,
	CREATED = 201,
	ACCEPTED = 202,
	NON_AUTHORITATIVE_INFORMATION = 203,
	NO_CONTENT = 204,
	RESET_CONTENT = 205,
	PARTIAL_CONTENT = 206,
	MULTI_STATUS = 207,
	ALREADY_REPORTED = 208,
	MULTIPLE_CHOICES = 300,
	MOVED_PERMANENTLY = 301,
	FOUND = 302,
	SEE_OTHER = 303,
	NOT_MODIFIED = 304,
	USE_PROXY = 305,
	TEMPORARY_REDIRECT = 307,
	PERMANENT_REDIRECT = 308,
	BAD_REQUEST = 400,
	UNAUTHORIZED = 401,
	PAYMENT_REQUIRED = 402,
	FORBIDDEN = 403,
	NOT_FOUND = 404,
	METHOD_NOT_ALLOWED = 405,
	NOT_ACCEPTABLE = 406,
	PROXY_AUTHENTICATION_REQUIRED = 407,
	REQUEST_TIMEOUT = 408,
	CONFLICT = 409,
	GONE = 410,
	LENGTH_REQUIRED = 411,
	PRECONDITION_FAILED = 412,
	REQUEST_ENTITY_TOO_LARGE = 413,
	REQUEST_URI_TOO_LARGE = 414,
	UNSUPPORTED_MEDIA_TYPE = 415,
	REQUEST_RANGE_NOT_SATISFIABLE = 416,
	EXPECTATION_FAILED = 417,
	I_AM_A_TEAPOT = 418,
	UNPROCESSABLE_ENTITY = 422,
	LOCKED = 423,
	FAILED_DEPENDENCY = 424,
	TOO_EARLY = 425,
	UPGRADE_REQUIRED = 426,
	PRECONDITION_REQUIRED = 428,
	TOO_MANY_REQUESTS = 429,
	REQUEST_HEADER_FIELDS_TOO_LARGE = 431,
	RETRY_WITH = 449,
	INTERNAL_SERVER_ERROR = 500,
	NOT_IMPLEMENTED = 501,
	BAD_GATEWAY = 502,
	SERVICE_UNAVAILABLE = 503,
	GATEWAY_TIMEOUT = 504,
	HTTP_VERSION_NOT_SUPPORTED = 505,
	VARIANT_ALSO_NEGOTIATES = 506,
	INSUFFICIENT_STORAGE = 507,
	BANDWIDTH_LIMIT_EXCEEDED = 509,
	NOT_EXTENDED = 510,
	NETWORK_AUTHENTICATION_REQUIRED = 511
}
export declare const http: {
	send200Ok(res: import("express").Response<any, Record<string, any>>, msg?: ResponseMessage): import("express").Response<any, Record<string, any>>;
	send201Created(res: import("express").Response<any, Record<string, any>>, msg?: ResponseMessage): import("express").Response<any, Record<string, any>>;
	send204NoContent(res: import("express").Response<any, Record<string, any>>, msg?: ResponseMessage): import("express").Response<any, Record<string, any>>;
	send400BadRequest(res: import("express").Response<any, Record<string, any>>, msg?: ResponseMessage): import("express").Response<any, Record<string, any>>;
	send401UnAuthorized(res: import("express").Response<any, Record<string, any>>, msg?: ResponseMessage): import("express").Response<any, Record<string, any>>;
	send404NotFound(res: import("express").Response<any, Record<string, any>>, msg?: ResponseMessage): import("express").Response<any, Record<string, any>>;
	send405MethodNotAllowed(res: import("express").Response<any, Record<string, any>>, msg?: ResponseMessage): import("express").Response<any, Record<string, any>>;
	send409Conflict(res: import("express").Response<any, Record<string, any>>, msg?: ResponseMessage): import("express").Response<any, Record<string, any>>;
	send500ServerError(res: import("express").Response<any, Record<string, any>>, msg?: ResponseMessage): import("express").Response<any, Record<string, any>>;
	send503ServiceUnavailable(res: import("express").Response<any, Record<string, any>>, msg?: ResponseMessage): import("express").Response<any, Record<string, any>>;
	sendJSONResponse(res: import("express").Response<any, Record<string, any>>, status: number, content?: ResponseMessage): import("express").Response<any, Record<string, any>>;
	callbackError400: (req: import("express").Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>, res: import("express").Response<any, Record<string, any>>) => import("express").Response<any, Record<string, any>>;
	callbackError405: (req: import("express").Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>, res: import("express").Response<any, Record<string, any>>) => import("express").Response<any, Record<string, any>>;
	HttpResponseCodes: typeof HttpResponseCodes;
};
export function rsisFactory(options?: WorkDateOption): {
	workDate: (offset?: number, baseDay?: DateTypes) => string;
	week: (atDate?: DateTypes) => any;
	toISODay: (offset?: number, baseDay?: DateTypes) => string;
	today: () => string;
	needUnitsForPeriod: (item: TItem, period: number) => number[];
};
declare function julianDay(gregorianDate: DateTypes): number;
declare function week21c(gregorianDate: DateTypes): number;
export declare const weeks: {
	JDN_of_20010101: number;
	julianDay: typeof julianDay;
	week21c: typeof week21c;
};
export declare const version: string;

export {
	logger as consoleLogger,
};

export {};
